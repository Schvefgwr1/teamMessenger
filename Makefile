.PHONY: help build up down restart logs clean init-minio

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
help:
	@echo "Team Messenger Docker Commands:"
	@echo "  make build      - –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã"
	@echo "  make up         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
	@echo "  make down       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
	@echo "  make restart    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
	@echo "  make logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  make logs-follow - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
	@echo "  make clean      - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã"
	@echo "  make init-minio - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MinIO bucket"
	@echo "  make status     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "  make rebuild    - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ"
	@echo ""
	@echo "üìÅ Environment files:"
	@echo "  make setup-compose  - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å compose.env –¥–ª—è Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
	@echo "  make env-dev        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  make env-prod       - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
	@echo "  make setup-services - –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo ""
	@echo "‚ÑπÔ∏è  –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:"
	@echo "  üìÑ compose.env      - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
	@echo "  üìÑ —Å–µ—Ä–≤–∏—Å—ã/.env     - –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
	@echo "  üîÑ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ compose.env —Ñ–∞–π–ª–∞ –¥–ª—è Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
setup-compose:
	@if [ ! -f compose.env ]; then \
		echo "–°–æ–∑–¥–∞–µ–º compose.env —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞..."; \
		cp compose.env.example compose.env; \
		echo "‚úÖ –§–∞–π–ª compose.env —Å–æ–∑–¥–∞–Ω! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã."; \
		echo "üìß –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SMTP –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."; \
	else \
		echo "‚ö†Ô∏è  –§–∞–π–ª compose.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –µ–≥–æ:"; \
		echo "   rm compose.env && make setup-compose"; \
	fi

# –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
setup-services:
	@echo "üîß –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞..."
	@for service in userService apiService fileService chatService taskService notificationService; do \
		if [ -f $$service/env.example ]; then \
			if [ ! -f $$service/.env ]; then \
				cp $$service/env.example $$service/.env; \
				echo "‚úÖ –°–æ–∑–¥–∞–Ω $$service/.env"; \
			else \
				echo "‚ö†Ô∏è  $$service/.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; \
			fi; \
		else \
			echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω $$service/env.example"; \
		fi; \
	done
	@echo "üìã –í—Å–µ .env —Ñ–∞–π–ª—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ!"

# –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è (compose + —Å–µ—Ä–≤–∏—Å—ã)
setup-env: setup-compose setup-services
	@echo ""
	@echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
	@echo ""
	@echo "üìù –¢–µ–ø–µ—Ä—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã:"
	@echo "  üìÑ compose.env - –ø–æ—Ä—Ç—ã, –ø–∞—Ä–æ–ª–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
	@echo "  üìÑ –∫–∞–∂–¥—ã–π_—Å–µ—Ä–≤–∏—Å/.env - –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
env-dev:
	@echo "–ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	@cp compose.development compose.env
	@echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
	@echo "üìù –õ–æ–∫–∞–ª—å–Ω—ã–µ .env —Ñ–∞–π–ª—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
env-prod:
	@echo "üìã –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ compose.env:"
	@echo ""
	@echo "# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:"
	@echo "POSTGRES_PASSWORD=secure_db_password_123"
	@echo "REDIS_PASSWORD=secure_redis_password"
	@echo "MINIO_ROOT_PASSWORD=secure_minio_password_123"
	@echo ""
	@echo "# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
	@echo "SMTP_USERNAME=your-real-email@domain.com"
	@echo "SMTP_PASSWORD=your-real-app-password"
	@echo ""
	@echo "# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –¥—Ä—É–≥–∏–µ –ø–æ—Ä—Ç—ã:"
	@echo "USER_SERVICE_PORT=8082"
	@echo "API_SERVICE_PORT=8084"
	@echo "# –∏ —Ç.–¥."
	@echo ""
	@echo "üìù –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ .env —Ñ–∞–π–ª—ã –≤ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–∏—Å–µ!"

# –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã
build:
	@make setup-env
	docker-compose --env-file compose.env build

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
up:
	@make setup-env
	docker-compose --env-file compose.env up -d
	@echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@echo "üîÑ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
	@sleep 45
	@echo "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO bucket..."
	@make init-minio
	@echo ""
	@echo "üöÄ Team Messenger –∑–∞–ø—É—â–µ–Ω!"
	@echo ""
	@echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
	@echo "  API Gateway:      http://localhost:$$(grep '^API_SERVICE_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '8084')"
	@echo "  User Service:     http://localhost:$$(grep '^USER_SERVICE_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '8082')"
	@echo "  File Service:     http://localhost:$$(grep '^FILE_SERVICE_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '8080')" 
	@echo "  Task Service:     http://localhost:$$(grep '^TASK_SERVICE_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '8081')"
	@echo "  Chat Service:     http://localhost:$$(grep '^CHAT_SERVICE_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '8083')"
	@echo "  Notification:     http://localhost:$$(grep '^NOTIFICATION_SERVICE_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '8085')"
	@echo ""
	@echo "üóÑÔ∏è  –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:"
	@echo "  PostgreSQL:       localhost:$$(grep '^POSTGRES_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '5432')"
	@echo "  Redis:            localhost:$$(grep '^REDIS_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '6379')"
	@echo "  Kafka:            localhost:$$(grep '^KAFKA_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '9092')"
	@echo "  MinIO Console:    http://localhost:$$(grep '^MINIO_CONSOLE_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '9001')"
	@echo "  MinIO API:        http://localhost:$$(grep '^MINIO_API_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '9000')"
	@echo "  MinIO Proxy:      http://localhost:$$(grep '^NGINX_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '8090')"
	@echo ""
	@echo "üìÅ –§–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ: http://localhost:$$(grep '^NGINX_PORT=' compose.env 2>/dev/null | cut -d'=' -f2 || echo '8090')/teamfiles/[filename]"
	@echo "üíæ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
down:
	docker-compose --env-file compose.env down

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
restart:
	docker-compose --env-file compose.env restart

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
logs:
	docker-compose --env-file compose.env logs

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
logs-follow:
	docker-compose --env-file compose.env logs -f

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
clean:
	docker-compose --env-file compose.env down -v --rmi all --remove-orphans
	docker system prune -f

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MinIO bucket
init-minio:
	@echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MinIO bucket..."
	@chmod +x scripts/init-minio.sh
	@./scripts/init-minio.sh

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
status:
	docker-compose --env-file compose.env ps

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ compose.env
show-config:
	@echo "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ compose.env —Ñ–∞–π–ª–∞:"
	@echo ""
	@if [ -f compose.env ]; then \
		echo "–ü–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤:"; \
		grep -E "SERVICE_PORT|POSTGRES_PORT|REDIS_PORT|KAFKA_PORT|NGINX_PORT|MINIO.*PORT" compose.env | sed 's/^/  /' || echo "  –ù–µ –Ω–∞–π–¥–µ–Ω–æ"; \
		echo ""; \
		echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î:"; \
		grep -E "POSTGRES_" compose.env | sed 's/^/  /' || echo "  –ù–µ –Ω–∞–π–¥–µ–Ω–æ"; \
		echo ""; \
		echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MinIO:"; \
		grep -E "MINIO_" compose.env | sed 's/^/  /' || echo "  –ù–µ –Ω–∞–π–¥–µ–Ω–æ"; \
	else \
		echo "‚ùå –§–∞–π–ª compose.env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: make setup-compose"; \
	fi
	@echo ""
	@echo "üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–µ .env —Ñ–∞–π–ª—ã —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@for service in userService apiService fileService chatService taskService notificationService; do \
		if [ -f $$service/.env ]; then \
			echo "  ‚úÖ $$service/.env"; \
		else \
			echo "  ‚ùå $$service/.env"; \
		fi; \
	done

# –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
rebuild:
	docker-compose --env-file compose.env down
	docker-compose --env-file compose.env build --no-cache
	docker-compose --env-file compose.env up -d

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ë–î, Redis, Kafka, MinIO)
up-infra:
	@make setup-env
	docker-compose --env-file compose.env up -d postgres redis zookeeper kafka minio nginx
	@echo "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞"

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
up-services:
	docker-compose --env-file compose.env up -d user-service file-service task-service chat-service notification-service api-service
	@echo "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã (–º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã  
down-services:
	docker-compose --env-file compose.env stop user-service file-service task-service chat-service notification-service api-service

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
logs-user:
	docker-compose --env-file compose.env logs -f user-service

logs-api:
	docker-compose --env-file compose.env logs -f api-service

logs-file:
	docker-compose --env-file compose.env logs -f file-service

logs-chat:
	docker-compose --env-file compose.env logs -f chat-service

logs-task:
	docker-compose --env-file compose.env logs -f task-service

logs-notification:
	docker-compose --env-file compose.env logs -f notification-service

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π
check-migrations:
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ë–î..."
	@docker exec -it team-messenger-postgres psql -U postgres -d team_messenger -c "SELECT * FROM schema_migrations ORDER BY service, version;"

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
migrate-user:
	docker-compose --env-file compose.env exec user-service ./migrate-and-run.sh ./migrations user-service

migrate-file:
	docker-compose --env-file compose.env exec file-service ./migrate-and-run.sh ./migrations file-service

migrate-chat:
	docker-compose --env-file compose.env exec chat-service ./migrate-and-run.sh ./migrations chat-service

migrate-task:
	docker-compose --env-file compose.env exec task-service ./migrate-and-run.sh ./migrations task-service 